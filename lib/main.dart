import 'dart:convert';

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:provider/provider.dart';

import 'src/core/config/firebase_config.dart';
import 'src/core/di/service_locator.dart';
import 'src/core/utils/logger.dart';
import 'src/infrastructure/services/firebase_message_handler.dart';
import 'src/infrastructure/services/notification_navigation_handler.dart';
import 'src/infrastructure/services/notification_service.dart';
import 'src/presentation/bloc/alerts/alerts_bloc.dart';
import 'src/presentation/bloc/alerts/alerts_event.dart';
import 'src/presentation/bloc/crypto/crypto_bloc.dart';
import 'src/presentation/bloc/crypto/crypto_event.dart';
import 'src/presentation/managers/theme_manager.dart';
import 'src/presentation/pages/spot_main_page.dart';
import 'src/presentation/theme/app_theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase with correct options
  await Firebase.initializeApp(
    options: FirebaseConfig.currentPlatform,
  );

  // Register background message handler
  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);

  // Configure dependency injection
  await ServiceLocator.setup();

  // Initialize theme manager
  final themeManager = ThemeManager();
  await themeManager.loadThemePreference();

  // Initialize notification service
  await NotificationService.initialize();

  // Enviar notificaci√≥n de prueba despu√©s de 3 segundos para probar
  Future.delayed(const Duration(seconds: 3), () async {
    await _testNotificationSystem();
  });

  runApp(SpotTradingApp(themeManager: themeManager));
}

/// Sistema completo de prueba de notificaciones
Future<void> _testNotificationSystem() async {
  try {
    AppLogger.notification('üß™ INICIANDO PRUEBA COMPLETA DEL SISTEMA DE NOTIFICACIONES');

    final token = NotificationService.fcmToken;

    if (token != null) {
      AppLogger.notification('üîë TOKEN FCM PARA PRUEBA: $token');

      // Mostrar informaci√≥n del dispositivo
      final deviceInfo = await NotificationService.getDeviceInfo();
      AppLogger.notification('üì± INFO DISPOSITIVO: $deviceInfo');

      // Verificar permisos
      final permissionsGranted = await NotificationService.areNotificationsEnabled();
      AppLogger.notification('üîê PERMISOS CONCEDIDOS: $permissionsGranted');

      // Simular notificaci√≥n local para prueba
      _simulateLocalNotification();
      AppLogger.notification('‚úÖ Notificaci√≥n simulada localmente');

      // Simular recepci√≥n de mensaje FCM en primer plano
      _simulateFCMMessage();

      // Intentar enviar al backend (puede fallar si no est√° corriendo)
      try {
        await NotificationService.sendTestNotification(
          symbol: 'BTC',
          dropPercent: -5,
        );
        AppLogger.notification('‚úÖ Notificaci√≥n de prueba enviada al backend');
      } catch (backendError) {
        AppLogger.notification('‚ö†Ô∏è Backend no disponible: $backendError');
        AppLogger.notification('üì± Pero la notificaci√≥n local y la simulaci√≥n FCM funcionan');
      }

      AppLogger.notification('üéâ PRUEBA DE NOTIFICACIONES COMPLETADA');
    } else {
      AppLogger.notification('‚ùå No hay token FCM disponible - revisa la configuraci√≥n de Firebase');
    }
  } catch (e) {
    AppLogger.error('‚ùå Error en prueba de notificaciones: $e');
  }
}

/// Simula una notificaci√≥n FCM completa para prueba
void _simulateFCMMessage() {
  AppLogger.notification('üì® SIMULANDO MENSAJE FCM RECIBIDO...');

  final simulatedMessage = {
    'messageId': 'sim-123456789',
    'notification': {
      'title': 'üö® ALERTA BTC - OPORTUNIDAD DE COMPRA',
      'body': 'Bitcoin cay√≥ 3.2% - IA recomienda BUY con 85% confianza',
    },
    'data': {
      'type': 'trading_alert',
      'symbol': 'BTC',
      'currentPrice': r'$43,500',
      'priceChange': '-3.2',
      'analysis': jsonEncode({
        'recommendation': 'BUY',
        'confidence': 85,
        'reasoning': 'Ca√≠da t√©cnica saludable con oportunidad de compra',
        'aiEngine': 'deepseek',
        'newsContext': [
          'Bitcoin cae 5% en correcci√≥n t√©cnica',
          'Analistas ven oportunidad de acumulaci√≥n',
          r'Soporte t√©cnico en $42,000'
        ]
      })
    }
  };

  // Procesar el mensaje simulado como si viniera de Firebase
  final remoteMessage = RemoteMessage.fromMap(simulatedMessage);

  // Llamar al handler directamente para simular recepci√≥n
  // Importamos el handler privado usando un m√©todo p√∫blico o creamos uno nuevo
  AppLogger.notification('üìä PROCESANDO MENSAJE SIMULADO...');
  _processSimulatedMessage(remoteMessage);
}

/// Procesa un mensaje simulado (similar al handler real)
void _processSimulatedMessage(RemoteMessage message) {
  AppLogger.notification('üì® ¬°MENSAJE SIMULADO RECIBIDO EN PRIMER PLANO!');
  AppLogger.notification('üìã Message ID: ${message.messageId}');
  AppLogger.notification('üìù T√≠tulo: ${message.notification?.title}');
  AppLogger.notification('üìÑ Cuerpo: ${message.notification?.body}');
  AppLogger.notification('üìä Datos: ${message.data}');

  final data = message.data;

  // Procesar alertas de trading con an√°lisis IA
  if (data['type'] == 'trading_alert' || data['type'] == 'price_alert') {
    final symbol = data['symbol'];
    final currentPrice = data['currentPrice'];
    final priceChange = data['priceChange'];

    AppLogger.notification('üö® ALERTA DE TRADING RECIBIDA PARA $symbol');
    AppLogger.notification('üí∞ Precio actual: $currentPrice');
    AppLogger.notification('üìâ Cambio: $priceChange%');

    // Procesar an√°lisis IA si est√° disponible
    if (data.containsKey('analysis')) {
      try {
        final analysisData = data['analysis'];
        final analysis = analysisData is String
            ? jsonDecode(analysisData)
            : analysisData;

        if (analysis is Map<String, dynamic>) {
          _logSimulatedAIAnalysis(analysis, symbol.toString());
        }
      } catch (e) {
        AppLogger.error('Error al parsear an√°lisis IA simulado: $e');
      }
    }
  }
}

/// Registra el an√°lisis IA simulado en los logs
void _logSimulatedAIAnalysis(Map<String, dynamic> analysis, String symbol) {
  final recommendation = analysis['recommendation'] ?? 'UNKNOWN';
  final confidence = analysis['confidence'] ?? 0;
  final reasoning = analysis['reasoning'] ?? 'Sin razonamiento disponible';
  final aiEngine = analysis['aiEngine'] ?? 'unknown';
  final newsContext = analysis['newsContext'];

  AppLogger.notification('ü§ñ AN√ÅLISIS IA SIMULADO PARA $symbol:');
  AppLogger.notification('   üìä Recomendaci√≥n: $recommendation');
  AppLogger.notification('   üéØ Confianza: $confidence%');
  AppLogger.notification('   üß† Motor IA: $aiEngine');
  AppLogger.notification('   üí≠ Razonamiento: $reasoning');

  if (newsContext != null && newsContext is List && newsContext.isNotEmpty) {
    AppLogger.notification('   üì∞ Contexto de noticias:');
    for (final news in newsContext) {
      AppLogger.notification('      ‚Ä¢ $news');
    }
  }
}

/// Simula una notificaci√≥n local para prueba
void _simulateLocalNotification() {
  AppLogger.info('=== SIMULACI√ìN DE NOTIFICACI√ìN RECIBIDA ===');
  AppLogger.info('Simbolo: BTC');
  AppLogger.info(r'Precio actual: $43,500');
  AppLogger.info('Cambio: -3.2%');
  AppLogger.info('');
  AppLogger.info('AN√ÅLISIS IA:');
  AppLogger.info('   Recomendaci√≥n: BUY');
  AppLogger.info('   Confianza: 85%');
  AppLogger.info('   Motor IA: deepseek');
  AppLogger.info('   Razonamiento: Ca√≠da t√©cnica saludable con oportunidad de compra');
  AppLogger.info('   Contexto de noticias:');
  AppLogger.info('      ‚Ä¢ Bitcoin cae 5% en correcci√≥n t√©cnica');
  AppLogger.info('      ‚Ä¢ Analistas ven oportunidad de acumulaci√≥n');
  AppLogger.info(r'      ‚Ä¢ Soporte t√©cnico en $42,000');
  AppLogger.info('');
  AppLogger.info('NOTIFICACI√ìN PUSH RECIBIDA (simulada)');
  AppLogger.info('   Titulo: ALERTA BTC - OPORTUNIDAD DE COMPRA');
  AppLogger.info('   Cuerpo: Bitcoin cay√≥ 3.2% - IA recomienda BUY con 85% confianza');
}

class SpotTradingApp extends StatelessWidget {

  const SpotTradingApp({
    super.key,
    required this.themeManager,
  });
  final ThemeManager themeManager;

  @override
  Widget build(BuildContext context) => MultiProvider(
      providers: [
        // Theme management
        ChangeNotifierProvider.value(value: themeManager),

        // BLoC providers
        BlocProvider(
          create: (context) =>
              ServiceLocator.get<CryptoBloc>()
                ..add(const GetAllCryptosWithMetrics()),
        ),
        BlocProvider(
          create: (context) =>
              AlertsBloc(getAlertsUseCase: ServiceLocator.get())
                ..add(const GetAllAlerts()),
        ),
      ],
      child: Consumer<ThemeManager>(
        builder: (context, themeManager, child) => MaterialApp(
            navigatorKey: NotificationNavigationHandler().navigatorKey,
            title: 'Buy The Dip',
            theme: AppTheme.lightTheme,
            darkTheme: AppTheme.darkTheme,
            themeMode: themeManager.themeMode,
            localizationsDelegates: const [
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            supportedLocales: const [
              Locale('en', ''), // English
              Locale('es', ''), // Spanish
            ],
            home: const SpotMainPage(),
            debugShowCheckedModeBanner: false,
          ),
      ),
    );
}
